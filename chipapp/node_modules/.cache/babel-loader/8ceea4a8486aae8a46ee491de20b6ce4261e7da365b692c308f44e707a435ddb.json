{"ast":null,"code":"var _jsxFileName = \"/Users/jamesmu/sbom/chipapp/src/Tree.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Tree as D3Tree } from 'react-d3-tree';\nimport importData from './data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeComponent = () => {\n  _s();\n  const [treeData, setTreeData] = useState(null);\n  useEffect(() => {\n    // Process the importData and convert it to a format suitable for react-d3-tree\n    // Example conversion:\n    const convertedData = {\n      name: 'root',\n      children: importData.components.map(component => ({\n        name: component.name,\n        attributes: component.licenses.map(license => ({\n          name: license.name\n        }))\n      }))\n    };\n    setTreeData(convertedData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(D3Tree, {\n    data: treeData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n_s(TreeComponent, \"DU6Sp2gzfXs0OkYeZ222lySI+Co=\");\n_c = TreeComponent;\nexport default TreeComponent;\n\n// import React from 'react';\n// import { Tree as D3Tree } from 'react-d3-tree';\n// import importData from './data.json';\n\n// const Tree = () => {\n\n//   const treeConfig = {\n//     enableLegacyTransitions: true,\n//     separation: { siblings: 0.75, nonSiblings: 0.75 },\n//     dimensions: { height: 500, width: 500 }\n//     // the dimensions are kinda hard coded lol\n//   };\n\n//   return (\n//     <div style={{ width: '100%', height: '650px' }}>\n//       <D3Tree data={importData} {...treeConfig} />\n//     </div>\n//   );\n// };\n\n// export default Tree;\nvar _c;\n$RefreshReg$(_c, \"TreeComponent\");","map":{"version":3,"names":["React","useEffect","useState","Tree","D3Tree","importData","jsxDEV","_jsxDEV","TreeComponent","_s","treeData","setTreeData","convertedData","name","children","components","map","component","attributes","licenses","license","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jamesmu/sbom/chipapp/src/Tree.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Tree as D3Tree } from 'react-d3-tree';\nimport importData from './data.json';\n\nconst TreeComponent = () => {\n  const [treeData, setTreeData] = useState(null);\n\n  useEffect(() => {\n    // Process the importData and convert it to a format suitable for react-d3-tree\n    // Example conversion:\n    const convertedData = {\n      name: 'root',\n      children: importData.components.map((component) => ({\n        name: component.name,\n        attributes: component.licenses.map((license) => ({\n          name: license.name,\n        })),\n      })),\n    };\n\n    setTreeData(convertedData);\n  }, []);\n\n  return <D3Tree data={treeData} />;\n};\n\nexport default TreeComponent;\n\n\n\n\n\n\n\n// import React from 'react';\n// import { Tree as D3Tree } from 'react-d3-tree';\n// import importData from './data.json';\n\n// const Tree = () => {\n\n//   const treeConfig = {\n//     enableLegacyTransitions: true,\n//     separation: { siblings: 0.75, nonSiblings: 0.75 },\n//     dimensions: { height: 500, width: 500 }\n//     // the dimensions are kinda hard coded lol\n//   };\n\n//   return (\n//     <div style={{ width: '100%', height: '650px' }}>\n//       <D3Tree data={importData} {...treeConfig} />\n//     </div>\n//   );\n// };\n\n// export default Tree;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,IAAIC,MAAM,QAAQ,eAAe;AAC9C,OAAOC,UAAU,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMW,aAAa,GAAG;MACpBC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAET,UAAU,CAACU,UAAU,CAACC,GAAG,CAAEC,SAAS,KAAM;QAClDJ,IAAI,EAAEI,SAAS,CAACJ,IAAI;QACpBK,UAAU,EAAED,SAAS,CAACE,QAAQ,CAACH,GAAG,CAAEI,OAAO,KAAM;UAC/CP,IAAI,EAAEO,OAAO,CAACP;QAChB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAEDF,WAAW,CAACC,aAAa,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOL,OAAA,CAACH,MAAM;IAACiB,IAAI,EAAEX;EAAS;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnC,CAAC;AAAChB,EAAA,CApBID,aAAa;AAAAkB,EAAA,GAAblB,aAAa;AAsBnB,eAAeA,aAAa;;AAQ5B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}