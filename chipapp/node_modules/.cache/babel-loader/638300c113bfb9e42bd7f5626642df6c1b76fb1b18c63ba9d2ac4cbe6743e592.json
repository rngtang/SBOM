{"ast":null,"code":"var _jsxFileName = \"/Users/jamesmu/sbom/chipapp/src/Tree.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport data from './data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tree = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const svg = d3.select(chartRef.current);\n\n    // Define the tree layout\n    const treeLayout = d3.tree().size([width, height]);\n\n    // Transform the hierarchical data into a tree structure\n    const root = d3.hierarchy(data);\n    const treeData = treeLayout(root);\n\n    // Create links\n    const links = treeData.links();\n    svg.selectAll('.link').data(links).enter().append('path').attr('class', 'link').attr('d', d3.linkHorizontal().x(d => d.y).y(d => d.x));\n\n    // Create nodes\n    const nodes = treeData.descendants();\n    const node = svg.selectAll('.node').data(nodes).enter().append('g').attr('class', 'node').attr('transform', d => `translate(${d.y},${d.x})`);\n    node.append('circle').attr('r', 5); // Add circles for nodes\n\n    node.append('text').attr('dy', '0.35em').attr('x', d => d.children ? -10 : 10).attr('text-anchor', d => d.children ? 'end' : 'start').text(d => d.data.name); // Display node names\n\n    // Clean up the SVG element when the component is unmounted\n    return () => {\n      svg.selectAll('*').remove();\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: chartRef,\n    width: 800,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(Tree, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useEffect","useRef","d3","data","jsxDEV","_jsxDEV","Tree","_ref","_s","chartRef","svg","select","current","treeLayout","tree","size","width","height","root","hierarchy","treeData","links","selectAll","enter","append","attr","linkHorizontal","x","d","y","nodes","descendants","node","children","text","name","remove","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jamesmu/sbom/chipapp/src/Tree.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport data from './data.json';\n\nconst Tree = ({ data }) => {\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const svg = d3.select(chartRef.current);\n\n    // Define the tree layout\n    const treeLayout = d3.tree().size([width, height]);\n\n    // Transform the hierarchical data into a tree structure\n    const root = d3.hierarchy(data);\n    const treeData = treeLayout(root);\n\n    // Create links\n    const links = treeData.links();\n    svg\n      .selectAll('.link')\n      .data(links)\n      .enter()\n      .append('path')\n      .attr('class', 'link')\n      .attr('d', d3.linkHorizontal().x(d => d.y).y(d => d.x));\n\n    // Create nodes\n    const nodes = treeData.descendants();\n    const node = svg\n      .selectAll('.node')\n      .data(nodes)\n      .enter()\n      .append('g')\n      .attr('class', 'node')\n      .attr('transform', d => `translate(${d.y},${d.x})`);\n\n    node.append('circle').attr('r', 5); // Add circles for nodes\n\n    node\n      .append('text')\n      .attr('dy', '0.35em')\n      .attr('x', d => (d.children ? -10 : 10))\n      .attr('text-anchor', d => (d.children ? 'end' : 'start'))\n      .text(d => d.data.name); // Display node names\n\n    // Clean up the SVG element when the component is unmounted\n    return () => {\n      svg.selectAll('*').remove();\n    };\n  }, [data]);\n\n  return (\n    <svg ref={chartRef} width={800} height={600}>\n      {/* SVG content will be rendered here */}\n    </svg>\n  );\n};\n\nexport default Tree;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}