{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Tree as D3Tree } from 'react-d3-tree';\nimport importData from './data.json';\nconst TreeComponent = () => {\n  _s();\n  const treeConfig = {\n    enableLegacyTransitions: true,\n    separation: {\n      siblings: 0.75,\n      nonSiblings: 0.75\n    },\n    dimensions: {\n      height: 500,\n      width: 500\n    }\n    // the dimensions are kinda hard coded lol\n  };\n\n  const [treeData, setTreeData] = useState(null);\n  useEffect(() => {\n    const convertedData = {\n      name: 'root',\n      children: importData.components.map(component => ({\n        name: component.name,\n        attributes: component.licenses.map(license => ({\n          name: license.name\n        }))\n      }))\n    };\n    setTreeData(convertedData);\n  }, []);\n  return;\n};\n_s(TreeComponent, \"DU6Sp2gzfXs0OkYeZ222lySI+Co=\");\n_c = TreeComponent;\nexport default Tree;\n\n// import React from 'react';\n// import { Tree as D3Tree } from 'react-d3-tree';\n// import importData from './data.json';\n\n// const Tree = () => {\n\n//   const treeConfig = {\n//     enableLegacyTransitions: true,\n//     separation: { siblings: 0.75, nonSiblings: 0.75 },\n//     dimensions: { height: 500, width: 500 }\n//     // the dimensions are kinda hard coded lol\n//   };\n\n//   return (\n//     <div style={{ width: '100%', height: '650px' }}>\n//       <D3Tree data={importData} {...treeConfig} />\n//     </div>\n//   );\n// };\n\n// export default Tree;\nvar _c;\n$RefreshReg$(_c, \"TreeComponent\");","map":{"version":3,"names":["React","useEffect","useState","Tree","D3Tree","importData","TreeComponent","_s","treeConfig","enableLegacyTransitions","separation","siblings","nonSiblings","dimensions","height","width","treeData","setTreeData","convertedData","name","children","components","map","component","attributes","licenses","license","_c","$RefreshReg$"],"sources":["/Users/jamesmu/sbom/chipapp/src/Tree.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Tree as D3Tree } from 'react-d3-tree';\nimport importData from './data.json';\n\nconst TreeComponent = () => {\n  const treeConfig = {\n    enableLegacyTransitions: true,\n    separation: { siblings: 0.75, nonSiblings: 0.75 },\n    dimensions: { height: 500, width: 500 }\n    // the dimensions are kinda hard coded lol\n  };\n  const [treeData, setTreeData] = useState(null);\n\n  useEffect(() => {\n    const convertedData = {\n      name: 'root',\n      children: importData.components.map((component) => ({\n        name: component.name,\n        attributes: component.licenses.map((license) => ({\n          name: license.name,\n        })),\n      })),\n    };\n\n    setTreeData(convertedData);\n  }, []);\n\n  return \n};\n\nexport default Tree;\n\n// import React from 'react';\n// import { Tree as D3Tree } from 'react-d3-tree';\n// import importData from './data.json';\n\n// const Tree = () => {\n\n//   const treeConfig = {\n//     enableLegacyTransitions: true,\n//     separation: { siblings: 0.75, nonSiblings: 0.75 },\n//     dimensions: { height: 500, width: 500 }\n//     // the dimensions are kinda hard coded lol\n//   };\n\n//   return (\n//     <div style={{ width: '100%', height: '650px' }}>\n//       <D3Tree data={importData} {...treeConfig} />\n//     </div>\n//   );\n// };\n\n// export default Tree;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,IAAIC,MAAM,QAAQ,eAAe;AAC9C,OAAOC,UAAU,MAAM,aAAa;AAEpC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,UAAU,GAAG;IACjBC,uBAAuB,EAAE,IAAI;IAC7BC,UAAU,EAAE;MAAEC,QAAQ,EAAE,IAAI;MAAEC,WAAW,EAAE;IAAK,CAAC;IACjDC,UAAU,EAAE;MAAEC,MAAM,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAI;IACtC;EACF,CAAC;;EACD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMiB,aAAa,GAAG;MACpBC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAEf,UAAU,CAACgB,UAAU,CAACC,GAAG,CAAEC,SAAS,KAAM;QAClDJ,IAAI,EAAEI,SAAS,CAACJ,IAAI;QACpBK,UAAU,EAAED,SAAS,CAACE,QAAQ,CAACH,GAAG,CAAEI,OAAO,KAAM;UAC/CP,IAAI,EAAEO,OAAO,CAACP;QAChB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAEDF,WAAW,CAACC,aAAa,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN;AACF,CAAC;AAACX,EAAA,CAxBID,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AA0BnB,eAAeH,IAAI;;AAEnB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}