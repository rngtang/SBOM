{"ast":null,"code":"var _jsxFileName = \"/Users/jamesmu/sbom/chipapp/src/Tree.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport data from './data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tree = () => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    // Read data from the JSON file\n    d3.json(\"./data.json\").then(data => {\n      // Create the tree layout\n      const treeLayout = d3.tree().size([600, 400]);\n\n      // Create a hierarchy from the data\n      const root = d3.hierarchy(data);\n\n      // Assign coordinates to each node\n      treeLayout(root);\n\n      // Create an SVG element\n      const svg = d3.select(svgRef.current).attr(\"width\", 800).attr(\"height\", 500).append(\"g\").attr(\"transform\", \"translate(50, 50)\");\n\n      // Create links\n      const links = svg.selectAll(\".link\").data(root.links()).enter().append(\"path\").attr(\"class\", \"link\").attr(\"d\", d3.linkHorizontal().x(d => d.y).y(d => d.x));\n\n      // Create nodes\n      const nodes = svg.selectAll(\".node\").data(root.descendants()).enter().append(\"g\").attr(\"class\", \"node\").attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n      // Add circles to nodes\n      nodes.append(\"circle\").attr(\"r\", 4);\n\n      // Add text labels to nodes\n      nodes.append(\"text\").attr(\"dy\", \"0.31em\").attr(\"x\", d => d.children ? -8 : 8).attr(\"text-anchor\", d => d.children ? \"end\" : \"start\").text(d => d.data.name);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n_s(Tree, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useEffect","useRef","d3","data","jsxDEV","_jsxDEV","Tree","_s","svgRef","json","then","treeLayout","tree","size","root","hierarchy","svg","select","current","attr","append","links","selectAll","enter","linkHorizontal","x","d","y","nodes","descendants","children","text","name","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jamesmu/sbom/chipapp/src/Tree.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport data from './data.json'\n\nconst Tree = () => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    // Read data from the JSON file\n    d3.json(\"./data.json\").then(data => {\n      // Create the tree layout\n      const treeLayout = d3.tree().size([600, 400]);\n\n      // Create a hierarchy from the data\n      const root = d3.hierarchy(data);\n\n      // Assign coordinates to each node\n      treeLayout(root);\n\n      // Create an SVG element\n      const svg = d3.select(svgRef.current)\n        .attr(\"width\", 800)\n        .attr(\"height\", 500)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(50, 50)\");\n\n      // Create links\n      const links = svg.selectAll(\".link\")\n        .data(root.links())\n        .enter().append(\"path\")\n        .attr(\"class\", \"link\")\n        .attr(\"d\", d3.linkHorizontal()\n          .x(d => d.y)\n          .y(d => d.x));\n\n      // Create nodes\n      const nodes = svg.selectAll(\".node\")\n        .data(root.descendants())\n        .enter().append(\"g\")\n        .attr(\"class\", \"node\")\n        .attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n      // Add circles to nodes\n      nodes.append(\"circle\")\n        .attr(\"r\", 4);\n\n      // Add text labels to nodes\n      nodes.append(\"text\")\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"x\", d => d.children ? -8 : 8)\n        .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n        .text(d => d.data.name);\n    });\n  }, []);\n\n  return <svg ref={svgRef} />;\n};\n\nexport default Tree;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}